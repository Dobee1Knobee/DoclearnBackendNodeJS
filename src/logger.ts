import { createLogger, format, transports } from "winston";

const { combine, timestamp, printf, colorize } = format;

// üé® –ö–∞—Å—Ç–æ–º–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è
const logFormat = printf(({ level, message, timestamp }) => {
    let emoji = "";

    switch (level) {
        case "error":
            emoji = "‚ùå";
            break;
        case "warn":
            emoji = "‚ö†Ô∏è";
            break;
        case "info":
            emoji = "‚ÑπÔ∏è";
            break;
        case "http":
            emoji = "üåê";
            break;
        case "debug":
            emoji = "üêõ";
            break;
        default:
            emoji = "";
    }

    return `${emoji} [${timestamp}] ${level.toUpperCase()}: ${message}`;
});

// ‚öôÔ∏è –°–æ–∑–¥–∞—ë–º –ª–æ–≥–≥–µ—Ä
const logger = createLogger({
    level: "debug", // –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤ (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å)
    format: combine(
        colorize(), // ‚úÖ –ö—Ä–∞—Å–∏—Ç —É—Ä–æ–≤–µ–Ω—å (error=–∫—Ä–∞—Å–Ω—ã–π, warn=–∂—ë–ª—Ç—ã–π –∏ —Ç.–¥.)
        timestamp({ format: "YYYY-MM-DD HH:mm:ss" }),
        logFormat
    ),
    transports: [
        new transports.Console(), // –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
        new transports.File({ filename: "logs/error.log", level: "error" }), // —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏
        new transports.File({ filename: "logs/combined.log" }) // –≤—Å–µ –ª–æ–≥–∏
    ]
});

export default logger;

