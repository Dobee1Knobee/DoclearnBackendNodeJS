import { Request, Response, NextFunction } from "express";
import { AuthService } from "@/services/AuthService";

const authService = new AuthService();

// –§—É–Ω–∫—Ü–∏—è –≤–Ω–µ –∫–ª–∞—Å—Å–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ cookies
const getSafariCookieOptions = (req: Request) => {
    const userAgent = req.headers['user-agent'] || '';
    const isSafari = userAgent.includes('Safari') && !userAgent.includes('Chrome');
    const isProduction = process.env.NODE_ENV === 'production';

    console.log('üç™ Cookie options for:', {
        isSafari,
        isProduction,
        userAgent: userAgent.substring(0, 50)
    });

    if (isSafari) {
        // –î–ª—è Safari –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        return {
            httpOnly: true,
            secure: false, // ‚úÖ –£–±–∏—Ä–∞–µ–º secure –¥–ª—è Safari (–¥–∞–∂–µ –Ω–∞ production)
            sameSite: 'lax' as const, // ‚úÖ –¢–æ–ª—å–∫–æ lax –¥–ª—è Safari
            path: '/',
            // ‚úÖ –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º domain –¥–ª—è Safari
        };
    }

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
    return {
        httpOnly: true,
        secure: isProduction,
        sameSite: isProduction ? 'none' as const : 'lax' as const,
        path: '/',
        domain: isProduction ? '.doclearn.ru' : undefined
    };
};

export class AuthController {
    async register(req: Request, res: Response, next: NextFunction) {
        try {
            res.clearCookie("token");
            res.clearCookie("refreshToken");

            const user = await authService.register(req.body);
            res.status(201).json(user);
        } catch (err) {
            next(err);
        }
    }

    async login(req: Request, res: Response, next: NextFunction) {
        try {
            const { email, password } = req.body;
            const result = await authService.login(email, password);

            const cookieOptions = getSafariCookieOptions(req);

            console.log('üç™ Setting cookies with options:', cookieOptions);

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º access token
            res.cookie("token", result.token, {
                ...cookieOptions,
                maxAge: 15 * 60 * 1000 // 15 –º–∏–Ω—É—Ç
            });

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º refresh token
            res.cookie("refreshToken", result.refreshToken, {
                ...cookieOptions,
                maxAge: 7 * 24 * 60 * 60 * 1000 // 7 –¥–Ω–µ–π
            });

            res.status(200).json({
                success: true,
                user: result.user,
                message: "–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
            });
        } catch (err) {
            next(err);
        }
    }

    async refresh(req: Request, res: Response, next: NextFunction) {
        try {
            const { refreshToken } = req.cookies;

            console.log('üîÑ Refresh attempt:', {
                hasRefreshToken: !!refreshToken,
                cookies: Object.keys(req.cookies),
                userAgent: req.headers['user-agent']?.substring(0, 50)
            });

            if (!refreshToken) {
                return res.status(401).json({
                    success: false,
                    error: "Refresh token –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ cookies",
                    code: "MISSING_REFRESH_TOKEN"
                });
            }

            const result = await authService.refreshAccessToken(refreshToken);
            const cookieOptions = getSafariCookieOptions(req);

            console.log('üç™ Refreshing cookies with options:', cookieOptions);

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π access token
            res.cookie("token", result.token, {
                ...cookieOptions,
                maxAge: 15 * 60 * 1000 // 15 –º–∏–Ω—É—Ç
            });

            res.status(200).json({
                success: true,
                message: "–¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã"
            });
        } catch (error) {
            console.error('‚ùå Refresh error:', error);

            // –û—á–∏—â–∞–µ–º cookies –ø—Ä–∏ –æ—à–∏–±–∫–µ
            const cookieOptions = getSafariCookieOptions(req);
            res.clearCookie("token", cookieOptions);
            res.clearCookie("refreshToken", cookieOptions);

            next(error);
        }
    }

    async verify(req: Request, res: Response, next: NextFunction) {
        try {
            const { email, code } = req.body;
            const result = await authService.verifyCode(email, code);

            const cookieOptions = getSafariCookieOptions(req);

            res.cookie("token", result.token, {
                ...cookieOptions,
                maxAge: 15 * 60 * 1000 // 15 –º–∏–Ω—É—Ç
            });

            res.cookie("refreshToken", result.refreshToken, {
                ...cookieOptions,
                maxAge: 7 * 24 * 60 * 60 * 1000 // 7 –¥–Ω–µ–π
            });

            return res.status(200).json({
                success: true,
                message: "Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω",
                user: result.user
            });
        } catch (err) {
            next(err);
        }
    }

    async validateResetToken(req: Request, res: Response, next: NextFunction): Promise<void> {
        try {
            const token = req.query.token as string;

            if (!token) {
                res.status(400).json({ error: "–¢–æ–∫–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });
                return;
            }

            const isValid = await authService.validatePasswordResetToken(token);

            if (!isValid) {
                res.status(400).json({ error: "–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫" });
                return;
            }

            res.status(200).json({ message: "–¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω" });
        } catch (err) {
            next(err);
        }
    }

    async requestPasswordReset(req: Request, res: Response, next: NextFunction): Promise<void> {
        try {
            const { email } = req.body;
            if (!email) {
                res.status(400).json({ error: "Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });
                return;
            }
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(email)) {
                res.status(400).json({ error: "Email –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π" });
                return;
            }
            await authService.createPasswordResetToken(email, res);
            res.status(200).json({
                message: "–ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç —Å —Ç–∞–∫–∏–º email —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–∞ –Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è"
            });
        } catch (error) {
            next(error);
        }
    }

    async resetPassword(req: Request, res: Response, next: NextFunction): Promise<void> {
        try {
            const { token, newPassword } = req.body;
            if (!token || !newPassword) {
                res.status(400).json({ error: "–¢–æ–∫–µ–Ω –∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
                return;
            }
            await authService.resetPasswordResetToken(token, newPassword);
            res.status(200).json({ message: "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω" });
        } catch (error) {
            next(error);
        }
    }

    async logout(req: Request, res: Response, next: NextFunction): Promise<void> {
        try {
            const cookieOptions = getSafariCookieOptions(req);

            res.clearCookie("token", cookieOptions);
            res.clearCookie("refreshToken", cookieOptions);

            res.status(200).json({
                success: true,
                message: "–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥"
            });
        } catch (error) {
            next(error);
        }
    }
}