import { Request, Response, NextFunction } from "express";
import { AuthService } from "@/services/AuthService";

const authService = new AuthService();

export class AuthController {
    async register(req: Request, res: Response, next: NextFunction) {
        try {
            res.clearCookie("token");

            const user = await authService.register(req.body);
            res.status(201).json(user);
        } catch (err) {
            next(err); // üëà –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ errorHandler
        }
    }


    async login(req: Request, res: Response, next: NextFunction) {
        try {
            const { email, password } = req.body;
            const result = await authService.login(email, password);
            res.cookie("token", result.token, {
                httpOnly: true,
                secure: true,
                sameSite: "none",
                maxAge: 15 * 60 * 1000, // ‚úÖ –∏—Å–ø—Ä–∞–≤–∏–ª–∏ –Ω–∞ 15 –º–∏–Ω—É—Ç
            });

            res.status(200).json({
                user: result.user,
                refreshToken: result.refreshToken // ‚úÖ –¥–æ–±–∞–≤–∏–ª–∏ refreshToken –≤ –æ—Ç–≤–µ—Ç
            });
        } catch (err) {
            next(err);
        }
    }
    async refresh(req: Request, res: Response,next: NextFunction) {
        try {
            const { refreshToken } = req.body;

            if (!refreshToken) {
                return res.status(400).json({ error: "Refresh token required" });
            }

            const result = await new AuthService().refreshAccessToken(refreshToken);
            res.cookie("token", result.token, {
                httpOnly: true,
                secure: true,
                sameSite: "none",
                maxAge: 15 * 60 * 1000
            });
            res.status(200).json("–¢–æ–∫–µ–Ω –≤ cookies —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω");
        } catch (error) {
            next(error);
        }
    }
    async verify(req: Request, res: Response, next: NextFunction) {
        try {
            const { email, code } = req.body;
            const result = await authService.verifyCode(email, code); // –∏–∑–º–µ–Ω–∏–ª –∏–º—è

            res.cookie("token", result.token, {
                httpOnly: true,
                secure: true,
                sameSite: "none",
                maxAge: 15 * 60 * 1000 // 15 –º–∏–Ω—É—Ç ‚úÖ
            });

            return res.status(200).json({
                message: "Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω",
                refreshToken: result.refreshToken, // ‚úÖ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º refreshToken
                user: result.user // ‚úÖ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º user
            });
        } catch (err) {
            next(err);
        }
    }
    async validateResetToken(req: Request, res: Response, next: NextFunction): Promise<void> {
        try {
            // ‚ùå –°—Ç–∞—Ä—ã–π –∫–æ–¥ (—á–∏—Ç–∞–µ—Ç –∏–∑ cookie):
            // const token = req.cookies.token;

            // ‚úÖ –ù–æ–≤—ã–π –∫–æ–¥ (—á–∏—Ç–∞–µ—Ç –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞):
            const token = req.query.token as string;

            if (!token) {
                res.status(400).json({ error: "–¢–æ–∫–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });
                return;
            }

            const isValid = await authService.validatePasswordResetToken(token);

            if (!isValid) {
                res.status(400).json({ error: "–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫" });
                return;
            }

            res.status(200).json({ message: "–¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω" });

        } catch (err) {
            next(err);
        }
    }


    async requestPasswordReset(req:Request,res:Response,next:NextFunction): Promise<void>  {
        try {
            const {email} = req.body;
            if (!email ) {
                res.status(400).json({error:"Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"});
                return
            }
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(email)) {
                res.status(400).json({error:"Email –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π"});
                return
            }
            await authService.createPasswordResetToken(email,res);
            res.status(200).json({
                message: "–ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç —Å —Ç–∞–∫–∏–º email —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–∞ –Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è"
            });
        }catch (error) {
            next(error);
        }
    }

    async resetPassword(req: Request, res: Response, next: NextFunction): Promise<void>  {
        try {
            const {token,newPassword} = req.body;
            if (!token || !newPassword) {
                res.status(400).json({error:"–¢–æ–∫–µ–Ω –∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"});
                return
            }
            await authService.resetPasswordResetToken(token,newPassword);
            res.status(200).json({message:"–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω"})
        }catch (error) {
            next(error);
        }
    }
}