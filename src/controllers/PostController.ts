// src/controllers/PostController.ts

// src/controllers/PostController.ts

import { Request, Response, NextFunction } from "express";
import { PostService } from "@/services/PostService";
import { CreatePostDto, UpdatePostDto, PostFilterDto } from "@/dto/PostDto";
import { ApiError } from "@/errors/ApiError";
import {AuthenticatedRequest} from "@/middlewares/authMiddleWare";


export class PostController {
    private postService: PostService;

    constructor() {
        this.postService = new PostService();

        // –ë–∏–Ω–¥–∏–º –º–µ—Ç–æ–¥—ã –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∫–ª–∞—Å—Å–∞ (–≤–∞–∂–Ω–æ –¥–ª—è Express!)
        this.createPost = this.createPost.bind(this);
        this.getPostById = this.getPostById.bind(this);
        this.getUserPosts = this.getUserPosts.bind(this);
        this.getMyPosts = this.getMyPosts.bind(this); // –î–æ–±–∞–≤–ª—è–µ–º
        this.getFeed = this.getFeed.bind(this);
        this.updatePost = this.updatePost.bind(this);
        this.deletePost = this.deletePost.bind(this);
        this.likePost = this.likePost.bind(this);
        this.unlikePost = this.unlikePost.bind(this);
        this.searchPosts = this.searchPosts.bind(this);
        this.getClinicalCases = this.getClinicalCases.bind(this);
        this.getPostsBySpecialty = this.getPostsBySpecialty.bind(this);
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
    async createPost(request: AuthenticatedRequest, response: Response, next: NextFunction): Promise<void> {
        try {
            const authorId = request.user?.id;

            if (!authorId) {
                response.status(401).json({
                    success: false,
                    error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
                });
                return;
            }

            // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
            if (!request.body.text || typeof request.body.text !== 'string') {
                response.status(400).json({
                    success: false,
                    error: "–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"
                });
                return;
            }

            const postData: CreatePostDto = {
                text: request.body.text.trim(),
                images: Array.isArray(request.body.images) ? request.body.images : [],
                medicalTags: Array.isArray(request.body.medicalTags) ? request.body.medicalTags : [],
                speciality: Array.isArray(request.body.speciality) ? request.body.speciality : [],
                isCase: Boolean(request.body.isCase),
                difficulty: request.body.difficulty || 'intermediate',
                visibility: request.body.visibility || 'public',
                isAnonymous: Boolean(request.body.isAnonymous),
                links: Array.isArray(request.body.links) ? request.body.links : []
            };

            const newPost = await this.postService.createPost(postData, authorId);

            response.status(201).json({
                success: true,
                data: newPost,
                message: "–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω"
            });

        } catch (error) {
            next(error);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –ø–æ ID
    async getPostById(request: Request, response: Response, next: NextFunction): Promise<void> {
        try {
            const { id } = request.params;

            if (!id) {
                response.status(400).json({
                    success: false,
                    error: "ID –ø–æ—Å—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"
                });
                return;
            }

            const post = await this.postService.getPostById(id);

            response.status(200).json({
                success: true,
                data: post
            });

        } catch (error) {
            next(error);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async getUserPosts(request: AuthenticatedRequest, response: Response, next: NextFunction): Promise<void> {
        try {
            const { userId } = request.params;
            const page = this.parseIntQuery(request.query.page, 1, 1, 100);
            const limit = this.parseIntQuery(request.query.limit, 20, 1, 50);

            const posts = await this.postService.getUserPosts(userId, page, limit);

            response.status(200).json({
                success: true,
                data: posts,
                pagination: {
                    page,
                    limit,
                    hasMore: posts.length === limit
                }
            });

        } catch (error) {
            next(error);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ (–¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    async getMyPosts(request: AuthenticatedRequest, response: Response, next: NextFunction): Promise<void> {
        try {
            const userId = request.user?.id;

            if (!userId) {
                response.status(401).json({
                    success: false,
                    error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
                });
                return;
            }

            const page = this.parseIntQuery(request.query.page, 1, 1, 100);
            const limit = this.parseIntQuery(request.query.limit, 20, 1, 50);

            const posts = await this.postService.getUserPosts(userId, page, limit);

            response.status(200).json({
                success: true,
                data: posts,
                pagination: {
                    page,
                    limit,
                    hasMore: posts.length === limit
                },
                message: `–ù–∞–π–¥–µ–Ω–æ ${posts.length} –≤–∞—à–∏—Ö –ø–æ—Å—Ç–æ–≤`
            });

        } catch (error) {
            next(error);
        }
    }

    // –õ–µ–Ω—Ç–∞ –ø–æ—Å—Ç–æ–≤
    async getFeed(request: Request, response: Response, next: NextFunction): Promise<void> {
        try {
            const page = this.parseIntQuery(request.query.page, 1, 1, 100);
            const limit = this.parseIntQuery(request.query.limit, 20, 1, 50);

            const posts = await this.postService.getFeed(page, limit);

            response.status(200).json({
                success: true,
                data: posts,
                pagination: {
                    page,
                    limit,
                    hasMore: posts.length === limit
                }
            });

        } catch (error) {
            next(error);
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞
    async updatePost(request: AuthenticatedRequest, response: Response, next: NextFunction) {
        try {
            const { id } = request.params;
            const authorId = request.user?.id;

            if (!authorId) {
                throw new ApiError(401, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
            }

            if (!id) {
                throw new ApiError(400, "ID –ø–æ—Å—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");
            }

            const updateData: UpdatePostDto = {
                text: request.body.text,
                medicalTags: request.body.medicalTags,
                specialty: request.body.specialty,
                difficulty: request.body.difficulty,
                visibility: request.body.visibility
            };

            const updatedPost = await this.postService.updatePost(id, updateData, authorId);

            response.status(200).json({
                success: true,
                data: updatedPost,
                message: "–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω"
            });

        } catch (error) {
            next(error);
        }
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞
    async deletePost(request: AuthenticatedRequest, response: Response, next: NextFunction) {
        try {
            const { id } = request.params;
            const authorId = request.user?.id?.toString();

            // –í–∞–ª–∏–¥–∞—Ü–∏—è
            if (!authorId) {
                throw new ApiError(401, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
            }

            if (!id) {
                throw new ApiError(400, "ID –ø–æ—Å—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");
            }


            // –í—ã–∑–æ–≤ —Å–µ—Ä–≤–∏—Å–∞
            await this.postService.deletePost(id, authorId);


            response.status(200).json({
                success: true,
                message: "–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"
            });

        } catch (error: unknown) {
            const err = error as Error;
            console.log('üí• Controller error caught:', err.message);
            console.log('   - Error type:', err.constructor.name);
            if (error instanceof ApiError) {
                console.log('   - Status code:', (error as ApiError).status);
            }
            next(error);
        }
    }
    // –õ–∞–π–∫ –ø–æ—Å—Ç–∞
    async likePost(request: AuthenticatedRequest, response: Response, next: NextFunction) {
        try {
            const { id } = request.params;
            const userId = request.user?.id;

            if (!userId) {
                throw new ApiError(401, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
            }

            if (!id) {
                throw new ApiError(400, "ID –ø–æ—Å—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");
            }

            await this.postService.likePost(id, userId);

            response.status(200).json({
                success: true,
                message: "–õ–∞–π–∫ –¥–æ–±–∞–≤–ª–µ–Ω"
            });

        } catch (error) {
            next(error);
        }
    }

    // –£–±—Ä–∞—Ç—å –ª–∞–π–∫
    async unlikePost(request: AuthenticatedRequest, response: Response, next: NextFunction) {
        try {
            const { id } = request.params;
            const userId = request.user?.id;

            if (!userId) {
                throw new ApiError(401, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
            }

            if (!id) {
                throw new ApiError(400, "ID –ø–æ—Å—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");
            }

            await this.postService.unlikePost(id, userId);

            response.status(200).json({
                success: true,
                message: "–õ–∞–π–∫ —É–¥–∞–ª–µ–Ω"
            });

        } catch (error) {
            next(error);
        }
    }

    // –ü–æ–∏—Å–∫ –ø–æ—Å—Ç–æ–≤
    async searchPosts(request: Request, response: Response, next: NextFunction): Promise<void> {
        try {
            const filter: PostFilterDto = {
                specialty: request.query.specialty as string,
                isCase: request.query.isCase === 'true',
                difficulty: request.query.difficulty as 'beginner' | 'intermediate' | 'advanced',
                authorRole: request.query.authorRole as 'student' | 'doctor' | 'professor',
                tags: request.query.tags ? (request.query.tags as string).split(',') : undefined,
                dateFrom: this.parseDate(request.query.dateFrom),
                dateTo: this.parseDate(request.query.dateTo),
                limit: this.parseIntQuery(request.query.limit, 20, 1, 100),
                skip: this.parseIntQuery(request.query.skip, 0, 0, 10000)
            };

            const posts = await this.postService.searchPosts(filter);

            response.status(200).json({
                success: true,
                data: posts,
                pagination: {
                    limit: filter.limit,
                    skip: filter.skip,
                    hasMore: posts.length === filter.limit
                }
            });

        } catch (error) {
            next(error);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏—Ö —Å–ª—É—á–∞–µ–≤
    async getClinicalCases(request: Request, response: Response, next: NextFunction) {
        try {
            const page = parseInt(request.query.page as string) || 1;
            const limit = Math.min(parseInt(request.query.limit as string) || 20, 50);

            const cases = await this.postService.getClinicalCases(page, limit);

            response.status(200).json({
                success: true,
                data: cases,
                pagination: {
                    page,
                    limit,
                    hasMore: cases.length === limit
                }
            });

        } catch (error) {
            next(error);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
    async getPostsBySpecialty(request: Request, response: Response, next: NextFunction) {
        try {
            const { specialty } = request.params;
            const page = parseInt(request.query.page as string) || 1;
            const limit = Math.min(parseInt(request.query.limit as string) || 20, 50);

            if (!specialty) {
                throw new ApiError(400, "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞");
            }

            const posts = await this.postService.getPostsBySpecialty(specialty, page, limit);

            response.status(200).json({
                success: true,
                data: posts,
                pagination: {
                    page,
                    limit,
                    hasMore: posts.length === limit
                }
            });

        } catch (error) {
            next(error);
        }
    }

    // –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    private parseIntQuery(value: unknown, defaultValue: number, min = 1, max = 1000): number {
        const parsed = typeof value === 'string' ? parseInt(value, 10) : NaN;
        if (isNaN(parsed) || parsed < min || parsed > max) {
            return defaultValue;
        }
        return parsed;
    }

    private parseDate(dateString: unknown): Date | undefined {
        if (typeof dateString !== 'string') return undefined;

        const date = new Date(dateString);
        if (isNaN(date.getTime())) {
            throw new ApiError(400, `–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: ${dateString}`);
        }
        return date;
    }
}