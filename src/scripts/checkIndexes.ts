// scripts/testSearch.ts

import mongoose from 'mongoose';
import {UserSearchService} from "@/services/SearchUsersService";

async function testSearch() {
    try {
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        await mongoose.connect('mongodb+srv://doclearn66:oxPt9JY4I1ePOklO@cluster0.7lceasn.mongodb.net/DOCLEARN');
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –ë–î\n');

        const searchService = new UserSearchService();

        // =================== –¢–ï–°–¢ 1: –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ ===================
        console.log('üìù –¢–ï–°–¢ 1: –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏');
        console.log('‚îÄ'.repeat(50));

        const testNames = ['–ë–∏—Ä—é–∫–æ–≤', '–ê—Ä—Ç–µ–º', '–í—ã—Å–æ—Ü–∫–∏–π'];
        for (const name of testNames) {
            const result = await searchService.searchUsers(name, 5);
            console.log(`–ü–æ–∏—Å–∫ "${name}": –Ω–∞–π–¥–µ–Ω–æ ${result.total} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);

            if (result.users.length > 0) {
                console.log('  –¢–æ–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
                result.users.slice(0, 3).forEach((user, i) => {
                    console.log(`    ${i + 1}. ${user.firstName} ${user.lastName} (${user.role}) - score: ${user.score?.toFixed(2)}`);
                });
            }
            console.log();
        }

        // =================== –¢–ï–°–¢ 2: –ü–æ–∏—Å–∫ –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ===================
        console.log('üìù –¢–ï–°–¢ 2: –ü–æ–∏—Å–∫ –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
        console.log('‚îÄ'.repeat(50));

        const specializations = ['–¥–∏–µ—Ç–æ–ª–æ–≥', '—Ö–∏—Ä—É—Ä–≥', '—Ç–µ—Ä–∞–ø–µ–≤—Ç'];
        for (const spec of specializations) {
            const result = await searchService.searchUsers(spec, 5);
            console.log(`–ü–æ–∏—Å–∫ "${spec}": –Ω–∞–π–¥–µ–Ω–æ ${result.total} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);

            if (result.users.length > 0) {
                console.log('  –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã:');
                result.users.slice(0, 3).forEach((user, i) => {
                    const userSpec = user.specializations?.[0]?.name || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞';
                    console.log(`    ${i + 1}. ${user.firstName} ${user.lastName} - ${userSpec}`);
                });
            }
            console.log();
        }

        // =================== –¢–ï–°–¢ 3: –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ ===================
        console.log('üìù –¢–ï–°–¢ 3: –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫');
        console.log('‚îÄ'.repeat(50));

        const combinedQueries = [
            '–ò–≤–∞–Ω–æ–≤ –∫–∞—Ä–¥–∏–æ–ª–æ–≥',
            '—Ö–∏—Ä—É—Ä–≥ –ú–æ—Å–∫–≤–∞',
            '–¥–∏–µ—Ç–æ–ª–æ–≥ –í–∞–≤–∏–ª–æ–≤'
        ];

        for (const query of combinedQueries) {
            const result = await searchService.searchUsers(query, 5);
            console.log(`–ü–æ–∏—Å–∫ "${query}": –Ω–∞–π–¥–µ–Ω–æ ${result.total} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);

            if (result.users.length > 0) {
                console.log('  –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
                result.users.slice(0, 2).forEach((user, i) => {
                    console.log(`    ${i + 1}. ${user.firstName} ${user.lastName}`);
                    console.log(`       –†–æ–ª—å: ${user.role}`);
                    console.log(`       –ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã: ${user.placeWork || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`);
                    console.log(`       Score: ${user.score?.toFixed(2)}`);
                });
            }
            console.log();
        }

        // =================== –¢–ï–°–¢ 4: –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ===================
        console.log('üìù –¢–ï–°–¢ 4: –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ');
        console.log('‚îÄ'.repeat(50));

        const prefixes = ['–ï–≥–æ—Ä', '–ê–ª–µ', '–ü–µ—Ç'];
        for (const prefix of prefixes) {
            const suggestions = await searchService.autocomplete(prefix, 3);
            console.log(`–ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è "${prefix}":`);

            if (suggestions.length > 0) {
                suggestions.forEach((sugg, i) => {
                    console.log(`  ${i + 1}. ${sugg.fullName} (${sugg.role})`);
                });
            } else {
                console.log('  –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
            }
            console.log();
        }

        // =================== –¢–ï–°–¢ 5: –ü–æ–∏—Å–∫ –ø–æ email ===================
        console.log('üìù –¢–ï–°–¢ 5: –ü–æ–∏—Å–∫ –ø–æ email');
        console.log('‚îÄ'.repeat(50));

        const testEmail = 'test@example.com';
        const userByEmail = await searchService.searchByEmail(testEmail);

        if (userByEmail) {
            console.log(`Email ${testEmail}: –ù–ê–ô–î–ï–ù`);
            console.log(`  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userByEmail.firstName} ${userByEmail.lastName}`);
        } else {
            console.log(`Email ${testEmail}: –ù–ï –ù–ê–ô–î–ï–ù`);
        }

        // =================== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===================
        console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–ò–°–ö–ê');
        console.log('‚îÄ'.repeat(50));
        console.log('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
        console.log('–¢–µ–∫—Å—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö:', error);
    } finally {
        await mongoose.disconnect();
        console.log('\nüëã –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç –ë–î');
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
testSearch();